C51 COMPILER V9.60.7.0   LCD1602                                                           04/22/2025 15:09:32 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE LCD1602
OBJECT MODULE PLACED IN .\Objects\LCD1602.obj
COMPILER INVOKED BY: D:\3software\keil\C51\BIN\C51.EXE LCD1602.c OPTIMIZE(8,SPEED) BROWSE INCDIR(D:\3software\keil\C51\I
                    -NC\Atmel) DEBUG OBJECTEXTEND PRINT(.\Listings\LCD1602.lst) OBJECT(.\Objects\LCD1602.obj)

line level    source

   1          #include "lcd1602.h"
   2          
   3          /*******************************************************************************
   4           * 函 数 名       : lcd1602_write_cmd
   5           * 函数功能          : LCD1602写命令
   6           * 输    入       : cmd：指令
   7           * 输    出            : 无
   8           *******************************************************************************/
   9          #if (LCD1602_4OR8_DATA_INTERFACE == 0) // 8位LCD
  10          void lcd1602_write_cmd(u8 cmd)
  11          {
  12   1          LCD1602_RS = 0; // 选择命令
  13   1          LCD1602_RW = 0; // 选择写
  14   1          LCD1602_E = 0;
  15   1          LCD1602_DATAPORT = cmd; // 准备命令
  16   1          delay_ms(1);
  17   1          LCD1602_E = 1; // 使能脚E先上升沿写入
  18   1          delay_ms(1);
  19   1          LCD1602_E = 0; // 使能脚E后负跳变完成写入
  20   1      }
  21          #else // 4位LCD
              void lcd1602_write_cmd(u8 cmd)
              {
                  LCD1602_RS = 0; // 选择命令
                  LCD1602_RW = 0; // 选择写
                  LCD1602_E = 0;
                  LCD1602_DATAPORT = cmd; // 准备命令
                  delay_ms(1);
                  LCD1602_E = 1; // 使能脚E先上升沿写入
                  delay_ms(1);
                  LCD1602_E = 0; // 使能脚E后负跳变完成写入
              
                  LCD1602_DATAPORT = cmd << 4; // 准备命令
                  delay_ms(1);
                  LCD1602_E = 1; // 使能脚E先上升沿写入
                  delay_ms(1);
                  LCD1602_E = 0; // 使能脚E后负跳变完成写入
              }
              #endif
  40          
  41          /*******************************************************************************
  42           * 函 数 名       : lcd1602_write_data
  43           * 函数功能          : LCD1602写数据
  44           * 输    入       : dat：数据
  45           * 输    出            : 无
  46           *******************************************************************************/
  47          #if (LCD1602_4OR8_DATA_INTERFACE == 0) // 8位LCD
  48          void lcd1602_write_data(u8 dat)
  49          {
  50   1          LCD1602_RS = 1; // 选择数据
  51   1          LCD1602_RW = 0; // 选择写
  52   1          LCD1602_E = 0;
  53   1          LCD1602_DATAPORT = dat; // 准备数据
  54   1          delay_ms(1);
C51 COMPILER V9.60.7.0   LCD1602                                                           04/22/2025 15:09:32 PAGE 2   

  55   1          LCD1602_E = 1; // 使能脚E先上升沿写入
  56   1          delay_ms(1);
  57   1          LCD1602_E = 0; // 使能脚E后负跳变完成写入
  58   1      }
  59          #else
              void lcd1602_write_data(u8 dat)
              {
                  LCD1602_RS = 1; // 选择数据
                  LCD1602_RW = 0; // 选择写
                  LCD1602_E = 0;
                  LCD1602_DATAPORT = dat; // 准备数据
                  delay_ms(1);
                  LCD1602_E = 1; // 使能脚E先上升沿写入
                  delay_ms(1);
                  LCD1602_E = 0; // 使能脚E后负跳变完成写入
              
                  LCD1602_DATAPORT = dat << 4; // 准备数据
                  delay_ms(1);
                  LCD1602_E = 1; // 使能脚E先上升沿写入
                  delay_ms(1);
                  LCD1602_E = 0; // 使能脚E后负跳变完成写入
              }
              #endif
  78          
  79          /*******************************************************************************
  80           * 函 数 名       : lcd1602_init
  81           * 函数功能          : LCD1602初始化
  82           * 输    入       : 无
  83           * 输    出            : 无
  84           *******************************************************************************/
  85          #if (LCD1602_4OR8_DATA_INTERFACE == 0) // 8位LCD
  86          void lcd1602_init(void)
  87          {
  88   1          lcd1602_write_cmd(0x38); // 数据总线8位，显示2行，5*7点阵/字符
  89   1          lcd1602_write_cmd(0x0c); // 显示功能开，无光标，光标闪烁
  90   1          lcd1602_write_cmd(0x06); // 写入新数据后光标右移，显示屏不移动
  91   1          lcd1602_write_cmd(0x01); // 清屏
  92   1      }
  93          #else
              void lcd1602_init(void)
              {
                  lcd1602_write_cmd(0x28); // 数据总线4位，显示2行，5*7点阵/字符
                  lcd1602_write_cmd(0x0c); // 显示功能开，无光标，光标闪烁
                  lcd1602_write_cmd(0x06); // 写入新数据后光标右移，显示屏不移动
                  lcd1602_write_cmd(0x01); // 清屏
              }
              #endif
 102          
 103          /*******************************************************************************
 104           * 函 数 名       : lcd1602_clear
 105           * 函数功能          : LCD1602清屏
 106           * 输    入       : 无
 107           * 输    出            : 无
 108           *******************************************************************************/
 109          void lcd1602_clear(void)
 110          {
 111   1          lcd1602_write_cmd(0x01);
 112   1      }
 113          
 114          /*******************************************************************************
 115          * 函 数 名       : lcd1602_show_string
 116          * 函数功能           : LCD1602显示字符
C51 COMPILER V9.60.7.0   LCD1602                                                           04/22/2025 15:09:32 PAGE 3   

 117          * 输    入       : x,y：显示坐标，x=0~15，y=0~1;
 118                             str：显示字符串
 119          * 输    出             : 无
 120          *******************************************************************************/
 121          void lcd1602_show_string(u8 x, u8 y, u8 *str)
 122          {
 123   1          u8 i = 0;
 124   1      
 125   1          if (y > 1 | x > 15)
 126   1              return; // 行列参数不对则强制退出
 127   1      
 128   1          if (y < 1) // 第1行显示
 129   1          {
 130   2              while (*str != '\0') // 字符串是以'\0'结尾，只要前面有内容就显示
 131   2              {
 132   3                  if (i < 16 - x) // 如果字符长度超过第一行显示范围，则在第二行继续显示
 133   3                  {
 134   4                      lcd1602_write_cmd(0x80 + i + x); // 第一行显示地址设置
 135   4                  }
 136   3                  else
 137   3                  {
 138   4                      lcd1602_write_cmd(0x40 + 0x80 + i + x - 16); // 第二行显示地址设置
 139   4                  }
 140   3                  lcd1602_write_data(*str); // 显示内容
 141   3                  str++;                    // 指针递增
 142   3                  i++;
 143   3              }
 144   2          }
 145   1          else // 第2行显示
 146   1          {
 147   2              while (*str != '\0')
 148   2              {
 149   3                  if (i < 16 - x) // 如果字符长度超过第二行显示范围，则在第一行继续显示
 150   3                  {
 151   4                      lcd1602_write_cmd(0x80 + 0x40 + i + x);
 152   4                  }
 153   3                  else
 154   3                  {
 155   4                      lcd1602_write_cmd(0x80 + i + x - 16);
 156   4                  }
 157   3                  lcd1602_write_data(*str);
 158   3                  str++;
 159   3                  i++;
 160   3              }
 161   2          }
 162   1      }
 163          
 164          /*******************************************************************************
 165           * 函 数 名       : lcd1602_num_2_str
 166           * 函数功能          : 将数字转化为字符串并显示在LCD1602上
 167           * 输    入       : 数字
 168           * 输    出            : 要显示的字符串
 169           *******************************************************************************/
 170          unsigned char *lcd1602_num_2_str(unsigned char num)
 171          {
 172   1          static unsigned char key_str[3]; // 用于存储单个字符的字符串,注意最后是'\0'
 173   1          if (num >= 10)
 174   1          {
 175   2              key_str[0] = 1 + '0';
 176   2              key_str[1] = num - 10 + '0';
 177   2          }
 178   1          else
C51 COMPILER V9.60.7.0   LCD1602                                                           04/22/2025 15:09:32 PAGE 4   

 179   1          {
 180   2              key_str[0] = 0 + '0';
 181   2              key_str[1] = num + '0';
 182   2          }
 183   1          key_str[2] = '\0'; // 字符结束标记
 184   1          return key_str;
 185   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    283    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3       5
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
